const schedule = require('node-schedule');
const axios = require('axios');
const httpStatus = require('http-status');
const ApiError = require('./ApiError');
const Product = require('../models/product.model');

const getProductsFromZoho = async () => {
  const products = await axios({
    method: 'get',
    url: `https://inventory.zoho.in/api/v1/items?organization_id=${process.env.ORGANIZATION_ID}`,
    headers: { Authorization: `Zoho-oauthtoken ${global.zohoToken}` },
  })
    .then((response) => {
      // console.log(response.data);
      return response.data.items;
    })
    .catch((err) => {
      // console.log(err);
      return err;
    });
  if (!products) {
    throw new ApiError(httpStatus.NOT_FOUND, 'Products not found');
  }
  //   console.log(items);
  return products;
};

schedule.scheduleJob('0 */3 * * *', async function () {
  // fetch ZohoItems
  const zohoItems = await getProductsFromZoho();
  // get DBItems
  const dbItems = await Product.find();
  // compare SKUs, price, and quantity
  zohoItems.forEach((zohoItem) => {
    const updatedItem = dbItems.find((dbItem) => dbItem.SKU === zohoItem.SKU);
    if (updatedItem) {
      if (updatedItem.sellingPrice !== zohoItem.selling_price || updatedItem.stock_on_hand !== zohoItem.stock_on_hand) {
        updatedItem.cf_mrp = zohoItem.cf_mrp.match(/\d/g).join('');
        updatedItem.stock_on_hand = zohoItem.stock_on_hand;
        updatedItem.save();
      }
    }
  });

  // if price or quantity is different, update DB
});
